# parse each category
for (i in 1:nrow(category)) {
# get the number of pages
print(paste('Category:',i))
print(category$category_name[i])
getpage<-GET(as.character(category$category_url[i]))
parse<-htmlParse(content(getpage,as='text'))
n_pages<-strsplit(gsub('[^0-9| ]','',xpathSApply(parse, "//div[@class='js-course-pagination']",xmlValue)),split = ' ')
n_pages<- as.numeric(unlist(n_pages))
n_pages<-n_pages[!is.na(n_pages)]
if (length(n_pages)>=1){
n_pages<-max(n_pages)
}
course_urls<-NULL
#get the course url of each page
if (length(n_pages)>=1){
for (j in 1:n_pages){
pageurl<-paste('?page=',j,sep = '')
url <- paste(category$category_url[i],pageurl,sep = '')
getpage<-GET(as.character(url))
parse<-htmlParse(content(getpage,as='text'))
#course_url
course<-xpathSApply(parse, "//a[@class='link-unstyled js-course-search-result']",xmlGetAttr, 'href')
course<-as.vector(sapply(course,function(x) paste('www.coursetalk.com',x,sep  = "")))
course_urls<-append(course_urls,course)
#course n_reviews
review_num<-xpathSApply(parse, "//li[@class='course-listing-summary__ratings__number']",xmlValue)
review_num<-as.numeric(trimws(gsub('[^0-9]','',review_num)))
course_review_num<-append(course_review_num,review_num)
#course rating
rating<-xpathSApply(parse, "//meta[@itemprop='value']",xmlGetAttr, 'content')
rating<-as.numeric(trimws(gsub('[^0-9]','',rating)))
course_rating<-append(course_rating,rating)
#provider
provider<-xpathSApply(parse, "//img[@class='img-responsive']",xmlGetAttr, 'alt')
provider<-provider[grep('logo',provider)]
provider<-trimws(gsub('logo','',provider))
course_provider<-append(course_provider,provider)
}
}
if (length(n_pages)<1){
url <- category$category_url[i]
getpage<-GET(as.character(url))
parse<-htmlParse(content(getpage,as='text'))
#course url
course<-xpathSApply(parse, "//a[@class='link-unstyled js-course-search-result']",xmlGetAttr, 'href')
course<-as.vector(sapply(course,function(x) paste('www.coursetalk.com',x,sep  = "")))
course_urls<-append(course_urls,course)
#course n_reviews
review_num<-xpathSApply(parse, "//li[@class='course-listing-summary__ratings__number']",xmlValue)
review_num<-trimws(gsub('[^0-9]','',review_num))
course_review_num<-append(course_review_num,review_num)
#course rating
rating<-xpathSApply(parse, "//meta[@itemprop='value']",xmlGetAttr, 'content')
rating<-as.numeric(trimws(gsub('[^0-9]','',rating)))
course_rating<-append(course_rating,rating)
#provider
provider<-xpathSApply(parse, "//img[@class='img-responsive']",xmlGetAttr, 'alt')
provider<-provider[grep('logo',provider)]
provider<-trimws(gsub('logo','',provider))
course_provider<-append(course_provider,provider)
}
#####
course_category<-append(course_category,as.character(rep(category$category_name[i],times = length(course_urls))))
course_address<-append(course_address,course_urls)
#parse the course content
count0<-0
for (coursepage in course_urls) {
getpage<-GET(as.character(coursepage))
parse<-htmlParse(content(getpage,as='text'))
name<-xpathSApply(parse, "//h1[@class='course-header__name__title']",xmlValue)
name<-trimws(gsub('\n','',name))
count0 = count0+1
print(count0)
print(name)
if_free<-xpathSApply(parse, "//div[@class='course-enrollment-details__detail--narrow course-enrollment-details__detail--cost']",xmlValue)
if_free<-trimws(gsub('\n','',if_free))
desc<-xpathSApply(parse, "//div[@class='course-info__academic__item--extra-whitespace']",xmlValue)
desc<-trimws(gsub('\n','',desc))
###need to fix the space later for university and instructor
if (length(xpathSApply(parse, "//i[@class='course-info__academic__instuctor-icon']",xmlValue))>0){
instructor<-xpathSApply(parse, "//i[@class='course-info__academic__instuctor-icon']/..",xmlValue)
instructor<-trimws(gsub('\n|Instructors:','',instructor),which = c("both"))
}
if (length(xpathSApply(parse, "//i[@class='course-info__academic__school-icon']",xmlValue))>0){
university<-xpathSApply(parse, "//i[@class='course-info__academic__school-icon']/..",xmlValue)
university<-trimws(gsub('\n|School:','',university),which = c("both"))
}
#append to datasets
course_name<-append(course_name,name)
course_iffree<-append(course_iffree,if_free)
course_desc<-append(course_desc,desc)
course_university<-append(course_university,university)
course_instructor<-append(course_instructor,instructor)
}
}
complete_dataset<-data.frame(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating)
i
category_name[212]
length(course_name)
length(course_iffree)
length(course_desc)
length(course_university)
length(course_instructor)
length(course_address)
length(course_category)
course_iffree
length(course_iffree)
length(course_name)
length(course_address)
length(course_category)
length(course_iffree)
length(course_university)
length(course_review_num)
length(course_provider)
length(course_rating)
len
length(course_name)
length(course_address)
course_address<-course_address[1:46060]
length(course_category)
course_category<-course_category[1:46060]
course_iffree
length(course_iffree)
length(course_university)
length(course_instructor)
length(course_desc)
length(course_review_num)
course_review_num<-course_review_num[1:46060]
length(course_provider)
course_provider<-course_provider[1:46060]
length(course_rating)
course_rating<-course_rating[1:46060]
complete_dataset<-data.frame(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating)
View(complete_dataset)
1
2
3
View(tail(complete_dataset))
head(complete_dataset)
hea
head(course_name)
tail(course_name)
head(course_address)
tail(course_address)
head(course_category)
tail(course_category)
tail(course_iffree)
tail(course_university)
tail(course_instructor)
tail(course_desc)
tail(course_name)
tail(complete_dataset)
complete_dataset<-data.frame(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating)
a
tail(complete_dataset)
dim(complete_dataset)
complete_dataset<-data.frame(stringsAsFactors = F)
dim(complete_dataset)
complete_dataset<-data.frame(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating)
complete_dataset<-data.frame(stringsAsFactors = F)
complete_dataset<-data.frame(stringsAsFactors = F)
complete_dataset<-data.frame(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating)
dim(complete_dataset)
class(course_name)
class(course_address)
do.call(cbind,mtcars[,2],mtcars[,3],mtcars[,6])
do.call(cbind,list(mtcars[,2],mtcars[,3],mtcars[,6]))
mtcars[,c(2,3,6)]
compdataset<-do.call(cbind,list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating))
1
1
compdataset<-do.call(cbind,list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating))
d
dim(compdataset)
tail(compdataset)
class(compdataset)
compdataset<-as.data.frame(do.call(cbind,list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating)))
head(compdataset)
compdataset<-as.data.frame(do.call(cbind,list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating)))
names(compdataset)<-c('Course_Name','Course_Link','Course_Category','Course_Price','Course_University','Course_Instructor','Course_Description','Course_Review_Number','Course_Provider','Course_Rating')
head(compdataset)
tail(compdataset)
filter(compdataset,Course_Category=='Programming Languages')
names(compdataset)
library(dplyr)
nrow(filter(compdataset,Course_Category=='Programming Languages'))
unique(compdataset$Course_Category)
compdataset<-as.data.frame(do.call(cbind,list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating)))
names(compdataset)<-c('Course_Name','Course_Link','Course_Category','Course_Price','Course_University','Course_Instructor','Course_Description','Course_Review_Number','Course_Provider','Course_Rating')
compdataset<-apply(compdataset,2,as.character)
unique(compdataset$Course_Category)
compdataset<-do.call(cbind,list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating))
compdataset<-as.data.frame(apply(compdataset,2,as.character))
names(compdataset)<-c('Course_Name','Course_Link','Course_Category','Course_Price','Course_University','Course_Instructor','Course_Description','Course_Review_Number','Course_Provider','Course_Rating')
head(compdataset)
unique(compdataset$Course_Category)
compdataset<-do.call(cbind,list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating))
compdataset<-as.data.frame(compdataset)
compdataset<-do.call(cbind,list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating))
compdataset<-as.data.frame(apply(compdataset,2,as.character),stringsAsFactors = F)
names(compdataset)<-c('Course_Name','Course_Link','Course_Category','Course_Price','Course_University','Course_Instructor','Course_Description','Course_Review_Number','Course_Provider','Course_Rating')
head(compdataset)
unique(compdataset$Course_Category)
compdataset<-do.call(cbind,list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating))
compdataset<-as.data.frame(apply(compdataset,2,as.character),stringsAsFactors = F)
compdataset<-as.data.frame(apply(compdataset,2,trimws),stringsAsFactors = F)
names(compdataset)<-c('Course_Name','Course_Link','Course_Category','Course_Price','Course_University','Course_Instructor','Course_Description','Course_Review_Number','Course_Provider','Course_Rating')
unique(compdataset$Course_Category)
filter(compdataset,Course_Category=="Programming Languages")
nrow(filter(compdataset,Course_Category=="Programming Languages"))
start_url <- GET('https://www.coursetalk.com/subjects')
parse_category <- htmlParse(content(start_url,as='text'))
category_url<-xpathSApply(parse_category, "//a[@class='link-unstyled js-product-card']",xmlGetAttr, 'href')
category_url<- as.data.frame(category_url)
category_url<-apply(category_url,1,function(x) paste('www.coursetalk.com',x,sep = ""))
#category name
category_name <- gsub('\n','',xpathSApply(parse_category, "//a[@class='link-unstyled js-product-card']",xmlValue))
category_name <- sapply(category_name,trimws)
category_name<-as.vector(sapply(category_name,function(x) gsub('\\d{1} |\\d{2}|\\d{3}|\\d{4}|course|courses',"",x)))
category<-data.frame(category_name,category_url,stringsAsFactors = F)
######datasets to store scraped files#################
print(category$category_name[100])
length(unique(compdataset$Course_Category))
print(category$category_name[206])
print(category$category_name[205])
print(category$category_name[207])
unique(compdataset$Course_Category)
category$category_name
tail(compdataset)
nrow(compdataset)
compdataset2<-filter(compdataset,Course_Category != 'Programming Languages')
nrow(compdataset2)
compdataset<-filter(compdataset,Course_Category != 'Programming Languages')
category$category_name
category$category_name[212]
for (i in 212:nrow(category)) { print(category$category_name[i])}
dim(compdataset)
dim(course_name)
length(course_name)
z=44625
z
course_name<-course_name[1:z]
course_address<-course_address[1:z]
z
course_category<-course_category[1:z]
unique(course_category)
course_iffree<-course_iffree[1:z]
course_university<-course_university[1:z]
course_instructor<-course_instructor[1:z]
course_desc<-course_desc[1:z]
course_review_num<-course_review_num[1:z]
course_provider<-course_provider[1:z]
course_rating<-course_rating[1:z]
do.call(length,list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating))
sapply(list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating),length)
i=212
print(paste('Category:',i))
print(category$category_name[i])
dim(compdataset)
for (i in 212:nrow(category)) {
# get the number of pages
print(paste('Category:',i))
print(category$category_name[i])
getpage<-GET(as.character(category$category_url[i]))
parse<-htmlParse(content(getpage,as='text'))
n_pages<-strsplit(gsub('[^0-9| ]','',xpathSApply(parse, "//div[@class='js-course-pagination']",xmlValue)),split = ' ')
n_pages<- as.numeric(unlist(n_pages))
n_pages<-n_pages[!is.na(n_pages)]
if (length(n_pages)>=1){
n_pages<-max(n_pages)
}
course_urls<-NULL
#get the course url of each page
if (length(n_pages)>=1){
for (j in 1:n_pages){
pageurl<-paste('?page=',j,sep = '')
url <- paste(category$category_url[i],pageurl,sep = '')
getpage<-GET(as.character(url))
parse<-htmlParse(content(getpage,as='text'))
#course_url
course<-xpathSApply(parse, "//a[@class='link-unstyled js-course-search-result']",xmlGetAttr, 'href')
course<-as.vector(sapply(course,function(x) paste('www.coursetalk.com',x,sep  = "")))
course_urls<-append(course_urls,course)
#course n_reviews
review_num<-xpathSApply(parse, "//li[@class='course-listing-summary__ratings__number']",xmlValue)
review_num<-as.numeric(trimws(gsub('[^0-9]','',review_num)))
course_review_num<-append(course_review_num,review_num)
#course rating
rating<-xpathSApply(parse, "//meta[@itemprop='value']",xmlGetAttr, 'content')
rating<-as.numeric(trimws(gsub('[^0-9]','',rating)))
course_rating<-append(course_rating,rating)
#provider
provider<-xpathSApply(parse, "//img[@class='img-responsive']",xmlGetAttr, 'alt')
provider<-provider[grep('logo',provider)]
provider<-trimws(gsub('logo','',provider))
course_provider<-append(course_provider,provider)
}
}
if (length(n_pages)<1){
url <- category$category_url[i]
getpage<-GET(as.character(url))
parse<-htmlParse(content(getpage,as='text'))
#course url
course<-xpathSApply(parse, "//a[@class='link-unstyled js-course-search-result']",xmlGetAttr, 'href')
course<-as.vector(sapply(course,function(x) paste('www.coursetalk.com',x,sep  = "")))
course_urls<-append(course_urls,course)
#course n_reviews
review_num<-xpathSApply(parse, "//li[@class='course-listing-summary__ratings__number']",xmlValue)
review_num<-trimws(gsub('[^0-9]','',review_num))
course_review_num<-append(course_review_num,review_num)
#course rating
rating<-xpathSApply(parse, "//meta[@itemprop='value']",xmlGetAttr, 'content')
rating<-as.numeric(trimws(gsub('[^0-9]','',rating)))
course_rating<-append(course_rating,rating)
#provider
provider<-xpathSApply(parse, "//img[@class='img-responsive']",xmlGetAttr, 'alt')
provider<-provider[grep('logo',provider)]
provider<-trimws(gsub('logo','',provider))
course_provider<-append(course_provider,provider)
}
#####
course_category<-append(course_category,as.character(rep(category$category_name[i],times = length(course_urls))))
course_address<-append(course_address,course_urls)
#parse the course content
count0<-0
for (coursepage in course_urls) {
getpage<-GET(as.character(coursepage))
parse<-htmlParse(content(getpage,as='text'))
name<-xpathSApply(parse, "//h1[@class='course-header__name__title']",xmlValue)
name<-trimws(gsub('\n','',name))
count0 = count0+1
print(count0)
print(name)
if_free<-xpathSApply(parse, "//div[@class='course-enrollment-details__detail--narrow course-enrollment-details__detail--cost']",xmlValue)
if_free<-trimws(gsub('\n','',if_free))
desc<-xpathSApply(parse, "//div[@class='course-info__academic__item--extra-whitespace']",xmlValue)
desc<-trimws(gsub('\n','',desc))
###need to fix the space later for university and instructor
if (length(xpathSApply(parse, "//i[@class='course-info__academic__instuctor-icon']",xmlValue))>0){
instructor<-xpathSApply(parse, "//i[@class='course-info__academic__instuctor-icon']/..",xmlValue)
instructor<-trimws(gsub('\n|Instructors:','',instructor),which = c("both"))
}
if (length(xpathSApply(parse, "//i[@class='course-info__academic__school-icon']",xmlValue))>0){
university<-xpathSApply(parse, "//i[@class='course-info__academic__school-icon']/..",xmlValue)
university<-trimws(gsub('\n|School:','',university),which = c("both"))
}
#append to datasets
course_name<-append(course_name,name)
course_iffree<-append(course_iffree,if_free)
course_desc<-append(course_desc,desc)
course_university<-append(course_university,university)
course_instructor<-append(course_instructor,instructor)
}
}
length(course_category)
length(course_instructor)
unique(course_category)
course_category<-apply(course_category,2,trimws)
course_category<-apply(as.data.frame(course_category),1,trimws)
unique(course_category)
length(course_category)
length(course_name)
names(course_category)
class(course_category)
course_category <- course_category[course_category!='Social Sciences']
length(course_category)
z=47065
length(course_name)
course_name<-course_name[1:z]
course_address<-course_address[1:z]
course_category<-course_category[1:z]
course_iffree<-course_iffree[1:z]
course_university<-course_university[1:z]
course_instructor<-course_instructor[1:z]
course_desc<-course_desc[1:z]
course_review_num<-course_review_num[1:z]
course_provider<-course_provider[1:z]
course_rating<-course_rating[1:z]
do.call(list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating),lenth)
do.call(list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating),length)
sapply(list(course_name,course_address,course_category,course_iffree,course_university,course_instructor,course_desc,course_review_num,course_provider,course_rating),length)
category_name[212]
category_name[212:220]
category_name[212:230]
category_name[212:240]
category_name[238]
category_name[237]
unique(course_category)
category_name[230:238]
category_name[220:238]
unique(course_category)
sessionInfo
sessionInfo()
?options(download.file.method = "wininet")
library(rvest)
library(httr)
library(XML)
curl_docs()
library(curl)
curl_fetch_memory
?with_config(use_proxy(...),
)
shiny::runApp('Desktop/R_wd/Coursera/Developing Data Product/Developing_Data_Product/kmeans_app')
- Now with the app we can compare the outputs interactively
- We need to run following code multiple times, include/exclude different variables and clusters to compare the output if without the app
- We need to run following code multiple times, include/exclude different variables and clusters to compare the output if without the app
- Now with the app we can compare the outputs interactively
```{r}
plotcluster(mtcars, kmd$cluster)
```
Clustering Data Product Pitch Presentation Slides
library(gridExtra)
?grid.arrange
library(fpc)
library(gridExtra)
kmd<-kmeans(x = mtcars,centers = 5);kmd2<-kmeans(x = mtcars,centers = 4)
plt1<-plotcluster(mtcars, kmd$cluster)
plt2<-plotcluster(mtcars, kmd2$cluster)
grid.arrange(plt1,plt2,ncol=2)
?grid.arrange
plt1
plt1<-plotcluster(mtcars, kmd$cluster)
plt2<-plotcluster(mtcars, kmd2$cluster)
plt1
plt2
plot(plt1)
-plotcluster(mtcars, kmd$cluster)
plotcluster(mtcars, kmd$cluster)
kgplt<-plotcluster(mtcars, kmd$cluster)
kgplt
kgplt
plotcluster(mtcars, kmd2$cluster)
plotcluster(mtcars, kmd$cluster)
kmd<-kmeans(x = mtcars,centers = 5);kmd2<-kmeans(x = mtcars,centers = 4)
p1=plotcluster(mtcars, kmd$cluster)
p2=plotcluster(mtcars, kmd2$cluster)
print(p1)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
library(DT)
setwd('Desktop/capstone data/')
setwd('shiny_app/')
shiny::runApp()
library(googlesheets)
??googlesheets
googlesheets::gs_webapp_auth_url
?googlesheets::gs_webapp_auth_url
gs_webapp_get_token()
gs_webapp_auth_url()
read.table('My Project-093322451152.json')
shiny::runApp()
shiny::runApp()
